import https from "https";
// 84区までが第2水準
// 85区から86区 ARIB追加漢字
// 90区から93区 ARIB追加記号
// 外字とのマッピング
// E800-F8FFの0x1100=4352文字
// 87区と88区がBML中のDRCSとして使われる (STD-B24 第二分冊 (2/2) 第二編付属2 4.1.2参照)
// STD-B24 第一分冊 付録規定E EC区00点から
// とりあえず87区から88区 94*2=188文字を0xEC00-0xECBBまで割り当てることとする

// STD-B24 6.4 第一分冊 表7-19 追加記号集合の符号値
const arib = [
    // 85区
    0x3402, 0xE081, 0x4EFD, 0x4EFF, 0x4F9A, 0x4FC9, 0x509C, 0x511E, 0x51BC, 0x351F, 0x5307, 0x5361, 0x536C, 0x8A79, 0xE084, 0x544D, 0x5496, 0x549C, 0x54A9, 0x550E, 0x554A, 0x5672, 0x56E4, 0x5733, 0x5734, 0xFA10, 0x5880, 0x59E4, 0x5A23, 0x5A55, 0x5BEC, 0xFA11, 0x37E2, 0x5EAC, 0x5F34, 0x5F45, 0x5FB7, 0x6017, 0xFA6B, 0x6130, 0x6624, 0x66C8, 0x66D9, 0x66FA, 0x66FB, 0x6852, 0x9FC4, 0x6911, 0x693B, 0x6A45, 0x6A91, 0x6ADB, 0xE08A, 0xE08B, 0xE08C, 0x6BF1, 0x6CE0, 0x6D2E, 0xFA45, 0x6DBF, 0x6DCA, 0x6DF8, 0xFA46, 0x6F5E, 0x6FF9, 0x7064, 0xFA6C, 0xE08E, 0x7147, 0x71C1, 0x7200, 0x739F, 0x73A8, 0x73C9, 0x73D6, 0x741B, 0x7421, 0xFA4A, 0x7426, 0x742A, 0x742C, 0x7439, 0x744B, 0x3EDA, 0x7575, 0x7581, 0x7772, 0x4093, 0x78C8, 0x78E0, 0x7947, 0x79AE, 0x9FC6, 0x4103,
    0x9FC5, 0x79DA, 0x7A1E, 0x7B7F, 0x7C31, 0x4264, 0x7D8B, 0x7FA1, 0x8118, 0x813A, 0xFA6D, 0x82AE, 0x845B, 0x84DC, 0x84EC, 0x8559, 0x85CE, 0x8755, 0x87EC, 0x880B, 0x88F5, 0x89D2, 0x8AF6, 0x8DCE, 0x8FBB, 0x8FF6, 0x90DD, 0x9127, 0x912D, 0x91B2, 0x9233, 0x9288, 0x9321, 0x9348, 0x9592, 0x96DE, 0x9903, 0x9940, 0x9AD9, 0x9BD6, 0x9DD7, 0x9EB4, 0x9EB5,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,

    // loadDRCSで使われる外字領域 87区-88区 => U+EC00-U+ED19
    0xEC00, 0xEC01, 0xEC02, 0xEC03, 0xEC04, 0xEC05, 0xEC06, 0xEC07, 0xEC08, 0xEC09, 0xEC0A, 0xEC0B, 0xEC0C, 0xEC0D, 0xEC0E, 0xEC0F, 0xEC10, 0xEC11, 0xEC12, 0xEC13, 0xEC14, 0xEC15, 0xEC16, 0xEC17, 0xEC18, 0xEC19, 0xEC1A, 0xEC1B, 0xEC1C, 0xEC1D, 0xEC1E, 0xEC1F, 0xEC20, 0xEC21, 0xEC22, 0xEC23, 0xEC24, 0xEC25, 0xEC26, 0xEC27, 0xEC28, 0xEC29, 0xEC2A, 0xEC2B, 0xEC2C, 0xEC2D, 0xEC2E, 0xEC2F, 0xEC30, 0xEC31, 0xEC32, 0xEC33, 0xEC34, 0xEC35, 0xEC36, 0xEC37, 0xEC38, 0xEC39, 0xEC3A, 0xEC3B, 0xEC3C, 0xEC3D, 0xEC3E, 0xEC3F, 0xEC40, 0xEC41, 0xEC42, 0xEC43, 0xEC44, 0xEC45, 0xEC46, 0xEC47, 0xEC48, 0xEC49, 0xEC4A, 0xEC4B, 0xEC4C, 0xEC4D, 0xEC4E, 0xEC4F, 0xEC50, 0xEC51, 0xEC52, 0xEC53, 0xEC54, 0xEC55, 0xEC56, 0xEC57, 0xEC58, 0xEC59, 0xEC5A, 0xEC5B, 0xEC5C, 0xEC5D,
    0xEC5E, 0xEC5F, 0xEC60, 0xEC61, 0xEC62, 0xEC63, 0xEC64, 0xEC65, 0xEC66, 0xEC67, 0xEC68, 0xEC69, 0xEC6A, 0xEC6B, 0xEC6C, 0xEC6D, 0xEC6E, 0xEC6F, 0xEC70, 0xEC71, 0xEC72, 0xEC73, 0xEC74, 0xEC75, 0xEC76, 0xEC77, 0xEC78, 0xEC79, 0xEC7A, 0xEC7B, 0xEC7C, 0xEC7D, 0xEC7E, 0xEC7F, 0xEC80, 0xEC81, 0xEC82, 0xEC83, 0xEC84, 0xEC85, 0xEC86, 0xEC87, 0xEC88, 0xEC89, 0xEC8A, 0xEC8B, 0xEC8C, 0xEC8D, 0xEC8E, 0xEC8F, 0xEC90, 0xEC91, 0xEC92, 0xEC93, 0xEC94, 0xEC95, 0xEC96, 0xEC97, 0xEC98, 0xEC99, 0xEC9A, 0xEC9B, 0xEC9C, 0xEC9D, 0xEC9E, 0xEC9F, 0xECA0, 0xECA1, 0xECA2, 0xECA3, 0xECA4, 0xECA5, 0xECA6, 0xECA7, 0xECA8, 0xECA9, 0xECAA, 0xECAB, 0xECAC, 0xECAD, 0xECAE, 0xECAF, 0xECB0, 0xECB1, 0xECB2, 0xECB3, 0xECB4, 0xECB5, 0xECB6, 0xECB7, 0xECB8, 0xECB9, 0xECBA, 0xECBB,


    0x26CC, 0x26CD, 0x2757, 0x26CF, 0x26D0, 0x26D1,     -1, 0x26D2, 0x26D5, 0x26D3, 0x26D4,     -1,     -1,     -1,     -1, 0xE0D8, 0xE0D9,     -1,     -1, 0x26D6, 0x26D7, 0x26D8, 0x26D9, 0x26DA, 0x26DB, 0x26DC, 0x26DD, 0x26DE, 0x26DF, 0x26E0, 0x26E1, 0x2B55, 0x3248, 0x3249, 0x324A, 0x324B, 0x324C, 0x324D, 0x324E, 0x324F,     -1,     -1,     -1,     -1, 0x2491, 0x2492, 0x2493, 0xE0F8, 0xE0F9, 0xE0FA, 0xE0FB, 0xE0FC, 0xE0FD, 0xE0FE, 0xE0FF, 0xE180, 0xE181, 0xE182, 0xE183, 0xE184, 0xE185, 0xE186, 0xE187, 0x2B1B, 0x2B24, 0xE18A, 0xE18B, 0xE18C, 0xE18D, 0xE18E, 0x26BF, 0xE190, 0xE191, 0xE192, 0xE193, 0xE194, 0xE195, 0xE196, 0xE197, 0xE198, 0xE199, 0xE19A, 0x3299, 0xE19C,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
    0x26E3, 0x2B56, 0x2B57, 0x2B58, 0x2B59, 0x2613, 0x328B, 0xE1AE, 0x26E8, 0x3246, 0x3245, 0x26E9, 0x0FD6, 0x26EA, 0x26EB, 0x26EC, 0x2668, 0x26ED, 0x26EE, 0x26EF, 0x2693, 0x2708, 0x26F0, 0x26F1, 0x26F2, 0x26F3, 0x26F4, 0x26F5, 0xE1C3, 0x24B9, 0x24C8, 0x26F6, 0xE1C7, 0xE1C8, 0xE1C9, 0xE1CA, 0xE1CB, 0x26F7, 0x26F8, 0x26F9, 0x26FA, 0xE1D0, 0x260E, 0x26FB, 0x26FC, 0x26FD, 0x26FE, 0xE1D6, 0x26FF,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,
    0x27A1, 0x2B05, 0x2B06, 0x2B07, 0x2B2F, 0x2B2E, 0xE28B, 0xE28C, 0xE28D, 0xE28E, 0x33A1, 0x33A5, 0x339D, 0x33A0, 0x33A4, 0xE28F, 0x2488, 0x2489, 0x248A, 0x248B, 0x248C, 0x248D, 0x248E, 0x248F, 0x2490, 0xE290, 0xE291, 0xE292, 0xE293, 0xE294, 0xE295, 0xE296, 0xE297, 0xE298, 0xE299, 0xE29A, 0xE29B, 0xE29C, 0xE29D, 0xE29E, 0xE29F, 0x3233, 0x3236, 0x3232, 0x3231, 0x3239, 0x3244, 0x25B6, 0x25C0, 0x3016, 0x3017, 0x27D0, 0x00B2, 0x00B3, 0xE2A4, 0xE2A5, 0xE2A6, 0xE2A7, 0xE2A8, 0xE2A9, 0xE2AA, 0xE2AB, 0xE2AC, 0xE2AD, 0xE2AE, 0xE2AF, 0xE2B0, 0xE2B1, 0xE2B2, 0xE2B3, 0xE2B4, 0xE2B5, 0xE2B6, 0xE2B7, 0xE2B8, 0xE2B9, 0xE2BA, 0xE2BB, 0xE2BC, 0xE2BD, 0xE2BE, 0xE2BF, 0xE2C0, 0xE2C1, 0xE2C2, 0xE3A7, 0xE3A8, 0x3247, 0xE2C4, 0xE2C5, 0x213B,     -1,     -1,     -1,
    0x322A, 0x322B, 0x322C, 0x322D, 0x322E, 0x322F, 0x3230, 0x3237, 0x337E, 0x337D, 0x337C, 0x337B, 0x2116, 0x2121, 0x3036, 0x26BE, 0xE2CD, 0xE2CE, 0xE2CF, 0xE2D0, 0xE2D1, 0xE2D2, 0xE2D3, 0xE2D4, 0xE2D5, 0xE2D6, 0xE2D7, 0xE2D8, 0xE2D9, 0xE2DA, 0xE2DB, 0xE2DC, 0xE2DD, 0xE2DE, 0xE2DF, 0xE2E0, 0xE2E1, 0xE2E2, 0x2113, 0x338F, 0x3390, 0x33CA, 0x339E, 0x33A2, 0x3371,     -1,     -1, 0x00BD, 0x2189, 0x2153, 0x2154, 0x00BC, 0x00BE, 0x2155, 0x2156, 0x2157, 0x2158, 0x2159, 0x215A, 0x2150, 0x215B, 0x2151, 0x2152, 0x2600, 0x2601, 0x2602, 0x26C4, 0x2616, 0x2617, 0x26C9, 0x26CA, 0x2666, 0x2665, 0x2663, 0x2660, 0x26CB, 0x2A00, 0x203C, 0x2049, 0x26C5, 0x2614, 0x26C6, 0x2603, 0x26C7, 0x26A1, 0x26C8,     -1, 0x269E, 0x269F, 0x266C, 0xE2FB,     -1,     -1,     -1,
    0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x2470, 0x2471, 0x2472, 0x2473, 0x2474, 0x2475, 0x2476, 0x2477, 0x2478, 0x2479, 0x247A, 0x247B, 0x247C, 0x247D, 0x247E, 0x247F, 0x3251, 0x3252, 0x3253, 0x3254, 0xE383, 0xE384, 0xE385, 0xE386, 0xE387, 0xE388, 0xE389, 0xE38A, 0xE38B, 0xE38C, 0xE38D, 0xE38E, 0xE38F, 0xE390, 0xE391, 0xE392, 0xE393, 0xE394, 0xE395, 0xE396, 0xE397, 0xE398, 0xE399, 0xE39A, 0xE39B, 0xE39C, 0x3255, 0x3256, 0x3257, 0x3258, 0x3259, 0x325A, 0x2460, 0x2461, 0x2462, 0x2463, 0x2464, 0x2465, 0x2466, 0x2467, 0x2468, 0x2469, 0x246A, 0x246B, 0x246C, 0x246D, 0x246E, 0x246F, 0x2776, 0x2777, 0x2778, 0x2779, 0x277A, 0x277B, 0x277C, 0x277D, 0x277E, 0x277F, 0x24EB, 0x24EC, 0x325B,     -1,
];
https.request("https://encoding.spec.whatwg.org/index-jis0208.txt", async (res) => {
    const chunks: Buffer[] = [];
    for await (const chunk of res) {
        chunks.push(Buffer.from(chunk));
    }
    const index = Buffer.concat(chunks).toString("utf-8");
    const table: (number | undefined)[] = new Array(94 * 94);
    for (const line of index.split("\n")) {
        const groups = line.match(/^\s*(?<jis>\d+)\s+0x(?<unicode>[0-9A-F]+)/i)?.groups;
        if (groups == null) {
            continue;
        }
        const jis = Number.parseInt(groups.jis, 10);
        const unicode = Number.parseInt(groups.unicode, 16);
        const ku = Math.floor(jis / 94) + 1;
        if (ku === 13) {
            // NEC特殊文字は含めない
            continue;
        }
        table[jis] = unicode;
    }
    table.splice(94 * (85 - 1), arib.length, ...arib);
    const unicodeToJISMap = new Map<number, number>();
    console.log("export const jisToUnicodeMap: (number | number[])[] = [");
    for (let ku = 1; ku <= 94; ku++) {
        let line1: String[] = [];
        let line2: String[] = [];
        for (let ten = 1; ten <= 94; ten++) {
            const index = (ku - 1) * 94 + ten - 1;
            const unicode = table[index];
            if (unicode != null && unicode !== -1) {
                if (unicode >= 0xEC00 && unicode <= 0xF8FF) {
                    line1.push("'\\u" + unicode.toString(16).padStart(4, "0") + "'");
                } else {
                    line1.push(`'${String.fromCharCode(unicode)}'`);
                }
                line2.push("0x" + unicode.toString(16).padStart(4, "0"));
                if (unicodeToJISMap.has(unicode)) {
                    const prev = unicodeToJISMap.get(unicode)! - 0x2020;
                    const prevKu = prev >> 8;
                    const prevTen = prev & 0xff;
                    console.error(`${prevKu}-${prevTen} ${ku}-${ten} U+${unicode.toString(16).padStart(4, "0")} ${String.fromCharCode(unicode)}`);
                } else {
                    // GL
                    unicodeToJISMap.set(unicode, ((ku << 8) | ten) + 0x2020);
                }
            } else {
                line1.push("''");
                line2.push("-1");
            }
        }
        console.log("    // " + line1.join(", ") + ",");
        console.log("    " + line2.join(", ") + ",");
    }
    let line4: String[] = [];
    let line3: String[][] = [line4];
    for (const unicode of [...unicodeToJISMap.keys()].sort((a, b) => a - b)) {
        const jis = unicodeToJISMap.get(unicode)!;
        line4.push(`0x${unicode.toString(16)}: 0x${jis.toString(16)}`);
        if (line4.length == 11) {
            line4 = [];
            line3.push(line4);
        }
    }
    console.log("];");
    console.log("export const unicodeToJISMap: { [unicode: number]: number } = {");
    console.log(line3.map(x => "    " + x.join(", ")).join(",\n") + ",");
    console.log("};");
}).end();
